/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ArbitragePath } from "./ArbitragePath";
import { ArbitragePathCountArgs } from "./ArbitragePathCountArgs";
import { ArbitragePathFindManyArgs } from "./ArbitragePathFindManyArgs";
import { ArbitragePathFindUniqueArgs } from "./ArbitragePathFindUniqueArgs";
import { CreateArbitragePathArgs } from "./CreateArbitragePathArgs";
import { UpdateArbitragePathArgs } from "./UpdateArbitragePathArgs";
import { DeleteArbitragePathArgs } from "./DeleteArbitragePathArgs";
import { TradeFindManyArgs } from "../../trade/base/TradeFindManyArgs";
import { Trade } from "../../trade/base/Trade";
import { ArbitragePathService } from "../arbitragePath.service";
@graphql.Resolver(() => ArbitragePath)
export class ArbitragePathResolverBase {
  constructor(protected readonly service: ArbitragePathService) {}

  async _arbitragePathsMeta(
    @graphql.Args() args: ArbitragePathCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ArbitragePath])
  async arbitragePaths(
    @graphql.Args() args: ArbitragePathFindManyArgs
  ): Promise<ArbitragePath[]> {
    return this.service.arbitragePaths(args);
  }

  @graphql.Query(() => ArbitragePath, { nullable: true })
  async arbitragePath(
    @graphql.Args() args: ArbitragePathFindUniqueArgs
  ): Promise<ArbitragePath | null> {
    const result = await this.service.arbitragePath(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ArbitragePath)
  async createArbitragePath(
    @graphql.Args() args: CreateArbitragePathArgs
  ): Promise<ArbitragePath> {
    return await this.service.createArbitragePath({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ArbitragePath)
  async updateArbitragePath(
    @graphql.Args() args: UpdateArbitragePathArgs
  ): Promise<ArbitragePath | null> {
    try {
      return await this.service.updateArbitragePath({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArbitragePath)
  async deleteArbitragePath(
    @graphql.Args() args: DeleteArbitragePathArgs
  ): Promise<ArbitragePath | null> {
    try {
      return await this.service.deleteArbitragePath(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Trade], { name: "trades" })
  async findTrades(
    @graphql.Parent() parent: ArbitragePath,
    @graphql.Args() args: TradeFindManyArgs
  ): Promise<Trade[]> {
    const results = await this.service.findTrades(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
