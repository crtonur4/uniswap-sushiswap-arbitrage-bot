/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ArbitragePath as PrismaArbitragePath,
  Trade as PrismaTrade,
} from "@prisma/client";

export class ArbitragePathServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArbitragePathCountArgs, "select">
  ): Promise<number> {
    return this.prisma.arbitragePath.count(args);
  }

  async arbitragePaths(
    args: Prisma.ArbitragePathFindManyArgs
  ): Promise<PrismaArbitragePath[]> {
    return this.prisma.arbitragePath.findMany(args);
  }
  async arbitragePath(
    args: Prisma.ArbitragePathFindUniqueArgs
  ): Promise<PrismaArbitragePath | null> {
    return this.prisma.arbitragePath.findUnique(args);
  }
  async createArbitragePath(
    args: Prisma.ArbitragePathCreateArgs
  ): Promise<PrismaArbitragePath> {
    return this.prisma.arbitragePath.create(args);
  }
  async updateArbitragePath(
    args: Prisma.ArbitragePathUpdateArgs
  ): Promise<PrismaArbitragePath> {
    return this.prisma.arbitragePath.update(args);
  }
  async deleteArbitragePath(
    args: Prisma.ArbitragePathDeleteArgs
  ): Promise<PrismaArbitragePath> {
    return this.prisma.arbitragePath.delete(args);
  }

  async findTrades(
    parentId: string,
    args: Prisma.TradeFindManyArgs
  ): Promise<PrismaTrade[]> {
    return this.prisma.arbitragePath
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .trades(args);
  }
}
